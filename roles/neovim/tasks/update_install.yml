---
- name: Check if Neovim is installed
  ansible.builtin.command:
    cmd: command -v nvim
  register: is_installed
  failed_when: false
  changed_when: false
  ignore_errors: true

- name: Get Neovim version
  ansible.builtin.command:
    cmd: nvim --version
  when: is_installed.rc == 0
  register: result
  changed_when: false

- name: Get Current Version
  ansible.builtin.set_fact:
    current_version: "{{ result.stdout.split()[1] }}"
  when: is_installed.rc == 0

- name: Get latest version from GitHub
  ansible.builtin.uri:
    url: https://api.github.com/repos/neovim/neovim/releases/latest
    method: GET
    return_content: true
  register: repo_info

- name: Extract latest tag name
  ansible.builtin.set_fact:
    latest_tag: "{{ repo_info.json.tag_name }}"

- name: Compare versions and set update_needed
  ansible.builtin.set_fact:
    update_needed: "{{ current_version != latest_tag }}"
  when: is_installed.rc == 0

- name: Download latest Neovim if not installed or update needed
  ansible.builtin.get_url:
    url: "https://github.com/neovim/neovim/releases/download/{{ latest_tag }}/nvim-linux-x86_64.tar.gz"
    dest: "/tmp/nvim-linux-x86_64.tar.gz"
    mode: '0755'
  when: update_needed | default(true)

- name: Extract tar
  ansible.builtin.unarchive:
    src: "/tmp/nvim-linux-x86_64.tar.gz"
    dest: "/usr/local/"
    extra_opts: [ "--strip-components=1" ]
    mode: '0755'
    owner: "{{ ansible_user }}"
    group: "{{ ansible_user }}"
  when: update_needed | default(true)
  become: true

- name: Remove archive
  ansible.builtin.file:
    path: "/tmp/nvim-linux-x86_64.tar.gz"
    state: absent
  when: update_needed | default(true)
